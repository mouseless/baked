[{"data":1,"prerenderedAt":430},["Reactive",2],{"content-query-JXvGL0XVdO":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":5,"_empty":6,"title":7,"description":8,"position":9,"body":10,"_type":425,"_id":426,"_source":427,"_file":428,"_extension":429},"/architecture","",false,"Architecture","DO is designed to be a framework that allows us to build software with any\narchitectural style. Core idea is to have good separation of concerns without\ncausing any repetitive work. To achieve this we need to break down an\napplication into its individual components such as features, layers and domain\nlogic.",3,{"type":11,"children":12,"toc":416},"root",[13,21,26,51,56,63,68,77,82,88,93,100,148,178,183,196,201,229,235,240,247,252,296,303,309,314,326,357,387,392,404,409],{"type":14,"tag":15,"props":16,"children":18},"element","h1",{"id":17},"architecture",[19],{"type":20,"value":7},"text",{"type":14,"tag":22,"props":23,"children":24},"p",{},[25],{"type":20,"value":8},{"type":14,"tag":27,"props":28,"children":29},"blockquote",{},[30,35],{"type":14,"tag":22,"props":31,"children":32},{},[33],{"type":20,"value":34},":information_source:",{"type":14,"tag":22,"props":36,"children":37},{},[38,40,49],{"type":20,"value":39},"DO is inspired by ",{"type":14,"tag":41,"props":42,"children":46},"a",{"href":43,"rel":44},"https://learn.microsoft.com/en-us/dotnet/architecture/modern-web-apps-azure/common-web-application-architectures#clean-architecture",[45],"nofollow",[47],{"type":20,"value":48},"Clean Architecture",{"type":20,"value":50},", but it has its own approach to the\nconcept.",{"type":14,"tag":22,"props":52,"children":53},{},[54],{"type":20,"value":55},"Let's dive into each type of software component to have a better understanding\nof how DO is structured.",{"type":14,"tag":57,"props":58,"children":60},"h2",{"id":59},"domain",[61],{"type":20,"value":62},"Domain",{"type":14,"tag":22,"props":64,"children":65},{},[66],{"type":20,"value":67},"At the core of an application lies its domain logic. By this we understand the\nvery reason for an application to exist. Everything else exists only to expose\nthis domain to outside world. So first part is the domain layer.",{"type":14,"tag":22,"props":69,"children":70},{},[71],{"type":14,"tag":72,"props":73,"children":76},"img",{"alt":74,"src":75},"diagram","./README-1.png",[],{"type":14,"tag":22,"props":78,"children":79},{},[80],{"type":20,"value":81},"This layer contains all of the business code of your application. Now we have a\nbasic definition of what a domain is, but we need to clarify what a layer is.",{"type":14,"tag":57,"props":83,"children":85},{"id":84},"layer",[86],{"type":20,"value":87},"Layer",{"type":14,"tag":22,"props":89,"children":90},{},[91],{"type":20,"value":92},"Each layer in DO introduces a new technology, such as a database server, web\nserver or a framework, into your application architecture. These layers are\nnamed after their concept or protocol they introduce.",{"type":14,"tag":22,"props":94,"children":95},{},[96],{"type":14,"tag":72,"props":97,"children":99},{"alt":74,"src":98},"./README-2.png",[],{"type":14,"tag":22,"props":101,"children":102},{},[103,105,111,113,119,121,126,128,133,134,139,141,146],{"type":20,"value":104},"In this example, ",{"type":14,"tag":106,"props":107,"children":108},"code-inline",{},[109],{"type":20,"value":110},"Do.Http",{"type":20,"value":112}," introduces ",{"type":14,"tag":114,"props":115,"children":116},"em",{},[117],{"type":20,"value":118},"HTTP",{"type":20,"value":120}," protocol as a layer through the\n",{"type":14,"tag":106,"props":122,"children":123},{},[124],{"type":20,"value":125},"ASP.NET Core",{"type":20,"value":127}," framework. Also, ",{"type":14,"tag":106,"props":129,"children":130},{},[131],{"type":20,"value":132},"Do.Database",{"type":20,"value":112},{"type":14,"tag":114,"props":135,"children":136},{},[137],{"type":20,"value":138},"ORM",{"type":20,"value":140}," concept as a\nlayer through the ",{"type":14,"tag":106,"props":142,"children":143},{},[144],{"type":20,"value":145},"EF Core",{"type":20,"value":147}," framework.",{"type":14,"tag":27,"props":149,"children":150},{},[151,155],{"type":14,"tag":22,"props":152,"children":153},{},[154],{"type":20,"value":34},{"type":14,"tag":22,"props":156,"children":157},{},[158,162,164,169,171,176],{"type":14,"tag":106,"props":159,"children":160},{},[161],{"type":20,"value":62},{"type":20,"value":163}," differs from other layers like ",{"type":14,"tag":106,"props":165,"children":166},{},[167],{"type":20,"value":168},"Http",{"type":20,"value":170}," and ",{"type":14,"tag":106,"props":172,"children":173},{},[174],{"type":20,"value":175},"Database",{"type":20,"value":177},". It is a\nspecial kind of layer that processes your domain assemblies to create an\napplication schema out of your domain objects so that they can be used in\ncreating configuration, conventions and/or generating source code.",{"type":14,"tag":22,"props":179,"children":180},{},[181],{"type":20,"value":182},"But your domain objects would not just be exposed as API endpoints and mapped\nonto a relational database. For that, we need to be able to configure those\nlayers so that they know how to interpret your domain objects.",{"type":14,"tag":22,"props":184,"children":185},{},[186,188,194],{"type":20,"value":187},"This is why every layer comes with its own configuration API that is specific\nto the technology it uses. This API may contain a bunch of helper classes\nand/or facade methods that makes it easy to build a certain type of\nconfiguration, but they do ",{"type":14,"tag":189,"props":190,"children":191},"strong",{},[192],{"type":20,"value":193},"not",{"type":20,"value":195}," have opinions upfront.",{"type":14,"tag":22,"props":197,"children":198},{},[199],{"type":20,"value":200},"Another perspective to define whether a component is a layer or not is that;",{"type":14,"tag":202,"props":203,"children":204},"ul",{},[205,218],{"type":14,"tag":206,"props":207,"children":208},"li",{},[209,211,216],{"type":20,"value":210},"If it introduces an internal system component like a database, message queue\nserver, web server, a framework; then it ",{"type":14,"tag":189,"props":212,"children":213},{},[214],{"type":20,"value":215},"is",{"type":20,"value":217}," a layer.",{"type":14,"tag":206,"props":219,"children":220},{},[221,223,227],{"type":20,"value":222},"If it is a cloud service that your software depends on, then it should\n",{"type":14,"tag":189,"props":224,"children":225},{},[226],{"type":20,"value":193},{"type":20,"value":228}," be a layer. External system components are defined as feature\nimplementations (adapters) which we'll cover in the next section.",{"type":14,"tag":57,"props":230,"children":232},{"id":231},"feature",[233],{"type":20,"value":234},"Feature",{"type":14,"tag":22,"props":236,"children":237},{},[238],{"type":20,"value":239},"A feature is an ability for a domain logic to use in order to access other\nsoftware components. Every feature consists of two parts; abstraction (port)\nand implementation (adapter).",{"type":14,"tag":241,"props":242,"children":244},"h3",{"id":243},"abstraction",[245],{"type":20,"value":246},"Abstraction",{"type":14,"tag":22,"props":248,"children":249},{},[250],{"type":20,"value":251},"An abstraction is the library that contains all common classes, interfaces,\nattributes, if any, for a feature. It is the only accessible part of a feature\nfrom the domain layer or from other feature implementations.",{"type":14,"tag":27,"props":253,"children":254},{},[255,259],{"type":14,"tag":22,"props":256,"children":257},{},[258],{"type":20,"value":34},{"type":14,"tag":22,"props":260,"children":261},{},[262,264,269,271,276,277,282,283,288,289,294],{"type":20,"value":263},"Each feature has only one abstraction, named after the ability it introduces,\ne.g. ",{"type":14,"tag":106,"props":265,"children":266},{},[267],{"type":20,"value":268},"Do.Fs",{"type":20,"value":270},", ",{"type":14,"tag":106,"props":272,"children":273},{},[274],{"type":20,"value":275},"Do.Sql",{"type":20,"value":270},{"type":14,"tag":106,"props":278,"children":279},{},[280],{"type":20,"value":281},"Do.Nosql",{"type":20,"value":270},{"type":14,"tag":106,"props":284,"children":285},{},[286],{"type":20,"value":287},"Do.Logging",{"type":20,"value":270},{"type":14,"tag":106,"props":290,"children":291},{},[292],{"type":20,"value":293},"Do.Auth",{"type":20,"value":295}," etc.",{"type":14,"tag":22,"props":297,"children":298},{},[299],{"type":14,"tag":72,"props":300,"children":302},{"alt":74,"src":301},"./README-3.png",[],{"type":14,"tag":241,"props":304,"children":306},{"id":305},"implementation",[307],{"type":20,"value":308},"Implementation",{"type":14,"tag":22,"props":310,"children":311},{},[312],{"type":20,"value":313},"This is the implementation part of a feature that provides concrete\nimplementations for the interfaces defined in the abstraction, along with\nopinionated configurations using the configuration API of the corresponding\nlayer.",{"type":14,"tag":27,"props":315,"children":316},{},[317,321],{"type":14,"tag":22,"props":318,"children":319},{},[320],{"type":20,"value":34},{"type":14,"tag":22,"props":322,"children":323},{},[324],{"type":20,"value":325},"A feature may configure multiple layers to achieve its functionality.",{"type":14,"tag":22,"props":327,"children":328},{},[329,331,336,337,342,343,348,350,355],{"type":20,"value":330},"Features may have multiple implementations, each named after its corresponding\ndesign or technology, e.g. ",{"type":14,"tag":106,"props":332,"children":333},{},[334],{"type":20,"value":335},"Do.Api.Rest",{"type":20,"value":270},{"type":14,"tag":106,"props":338,"children":339},{},[340],{"type":20,"value":341},"Do.Auth.Auth0",{"type":20,"value":270},{"type":14,"tag":106,"props":344,"children":345},{},[346],{"type":20,"value":347},"Do.Fs.Aws",{"type":20,"value":349},",\n",{"type":14,"tag":106,"props":351,"children":352},{},[353],{"type":20,"value":354},"Do.Sql.EfCore",{"type":20,"value":356},".",{"type":14,"tag":27,"props":358,"children":359},{},[360,365],{"type":14,"tag":22,"props":361,"children":362},{},[363],{"type":20,"value":364},":bulb:",{"type":14,"tag":22,"props":366,"children":367},{},[368,372,374,379,380,385],{"type":14,"tag":106,"props":369,"children":370},{},[371],{"type":20,"value":268},{"type":20,"value":373}," represents file system feature that provides an API to your domain\nlogic to read/write files. ",{"type":14,"tag":106,"props":375,"children":376},{},[377],{"type":20,"value":378},"Do.Fs.Local",{"type":20,"value":170},{"type":14,"tag":106,"props":381,"children":382},{},[383],{"type":20,"value":384},"Do.Fs.AwsS3",{"type":20,"value":386}," are two different\nimplementations that provides the same functionality through different system\ncomponents.",{"type":14,"tag":22,"props":388,"children":389},{},[390],{"type":20,"value":391},"A feature may depend on a layer, or another feature, strictly. In this case, an\napplication will be required to include dependent features and layers for\ndepending feature to be used. Most of the time this dependency is not strict,\nwhich means you can add that feature even if your application doesn't include\nits dependent features or layers.",{"type":14,"tag":27,"props":393,"children":394},{},[395,399],{"type":14,"tag":22,"props":396,"children":397},{},[398],{"type":20,"value":34},{"type":14,"tag":22,"props":400,"children":401},{},[402],{"type":20,"value":403},"Features depend on other features through their abstraction parts. Direct\ndependency between feature implementations is forbidden.",{"type":14,"tag":22,"props":405,"children":406},{},[407],{"type":20,"value":408},"In conclusion, feature implementations serve as bridges, connecting the domain\nlayer to other layers through their opinionated configurations. Below is a\ncomplete sample architecture, showcasing the integration of layers, features\nand the domain layer;",{"type":14,"tag":22,"props":410,"children":411},{},[412],{"type":14,"tag":72,"props":413,"children":415},{"alt":74,"src":414},"./README-4.png",[],{"title":5,"searchDepth":417,"depth":417,"links":418},2,[419,420,421],{"id":59,"depth":417,"text":62},{"id":84,"depth":417,"text":87},{"id":231,"depth":417,"text":234,"children":422},[423,424],{"id":243,"depth":9,"text":246},{"id":305,"depth":9,"text":308},"markdown","content:architecture:index.md","content","architecture/index.md","md",1686837159971]